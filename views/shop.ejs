<%
  const fallbackAltSuffix = (t.shop && t.shop.galleryAltFallback) || '분위기';
  const fallbackAltText = shop.imageAlt || `${shop.name} ${fallbackAltSuffix}`;
  function normalizeImageEntry(image) {
    if (!image) {
      return null;
    }

    if (typeof image === 'string') {
      return { src: image, alt: fallbackAltText };
    }

    if (typeof image === 'object' && image.src) {
      return {
        src: image.src,
        alt: image.alt || fallbackAltText,
      };
    }

    return null;
  }

  const primaryImageEntry = normalizeImageEntry(shop.image);
  const rawGalleryEntries = Array.isArray(shop.gallery) ? shop.gallery : [];
  const normalizedGalleryEntries = rawGalleryEntries
    .map(normalizeImageEntry)
    .filter(function (entry) {
      return entry && entry.src;
    });

  const highlightGallery = [];

  if (primaryImageEntry) {
    highlightGallery.push(primaryImageEntry);
  }

  normalizedGalleryEntries.forEach(function (entry) {
    if (!highlightGallery.some(function (existing) { return existing.src === entry.src; })) {
      highlightGallery.push(entry);
    }
  });

  const primaryImage = highlightGallery.length ? highlightGallery[0] : null;
  const mapText = (t.shop && t.shop.map) || {};

  function formatMapLabel(template) {
    if (typeof template !== 'string' || !template.trim()) {
      return `${shop.name || ''} location map`;
    }

    return template.replace(/\{\{\s*shopName\s*\}\}/g, shop.name || '');
  }
%>
<%- include('partials/head', {
  title: pageTitle,
  description: metaDescription,
  seoKeywords
}) %>
  <section class="detail-hero">
    <div class="container detail-hero__grid">
      <div class="detail-gallery detail-gallery--static">
        <% if (primaryImage) { %>
          <figure class="detail-gallery__slide detail-gallery__slide--static">
            <img src="<%= primaryImage.src %>" alt="<%= primaryImage.alt %>" />
          </figure>
        <% } else { %>
          <div class="detail-gallery__placeholder" aria-hidden="true"></div>
        <% } %>
      </div>
      <div class="detail-hero__info">
        <p class="detail-hero__meta"><%= shop.region %> · <%= shop.district %> · <%= shop.category %></p>
        <h1><%= shop.name %></h1>
        <% const defaultServices = ['강남권 픽업 서비스', '발렛파킹 서비스']; %>
        <% const serviceBadges = Array.isArray(t.shop && t.shop.services) && (t.shop.services.length ? t.shop.services : defaultServices) || defaultServices; %>
        <% if (serviceBadges.length) { %>
          <div class="detail-hero__services">
            <% serviceBadges.forEach(function(service) { %>
              <span class="detail-hero__service"><%= service %></span>
            <% }) %>
          </div>
        <% } %>
        <dl class="detail-hero__list">
          <div>
            <dt><%= t.shop && t.shop.address ? t.shop.address : 'Address' %></dt>
            <dd><%= shop.address %></dd>
          </div>
          <div>
            <dt><%= t.shop && t.shop.hours ? t.shop.hours : 'Hours' %></dt>
            <dd><%= shop.hours %></dd>
          </div>
        </dl>
        <div class="detail-hero__actions">
          <a class="back-link" href="/"><%= t.shop && t.shop.back ? t.shop.back : 'Back to home' %></a>
        </div>
      </div>
    </div>
  </section>

  <%
    const activeLang = typeof lang === 'string' && lang ? lang : 'ko';

    const defaultPricingTableData = [
      {
        label: '오후 9시 이전',
        charges: { base: 9, tc: 12, rt: 5 },
        guests: [
          { count: 1, label: '1인' },
          { count: 2, label: '2인' },
          { count: 3, label: '3인' },
          { count: 4, label: '4인' },
        ],
        amount: { suffix: '만' },
      },
      {
        label: '오후 9시 이후',
        charges: { base: 13, tc: 12, rt: 5 },
        guests: [
          { count: 1, label: '1인' },
          { count: 2, label: '2인' },
          { count: 3, label: '3인' },
          { count: 4, label: '4인' },
        ],
        amount: { suffix: '만' },
      },
    ];

    const pricingText = (t.shop && t.shop.pricing) || {};
    const pricingHighlight = (t.shop && t.shop.pricingHighlight) || {};
    const pricingSchedule = shop.pricingSchedule || null;
    const scheduleTableBlocks = buildBlocksFromSchedule(pricingSchedule);
    const scheduleDefaultBlockId = pricingSchedule && typeof pricingSchedule.defaultSegmentId === 'string'
      ? pricingSchedule.defaultSegmentId
      : null;
    const translationPricingTable = Array.isArray(t.shop && t.shop.pricingTable)
      ? t.shop.pricingTable
      : null;
    const rawPricingTableData = (
      scheduleTableBlocks.length
        ? scheduleTableBlocks
        : (Array.isArray(shop.pricingTable) && shop.pricingTable.length
          ? shop.pricingTable
          : (translationPricingTable && translationPricingTable.length
            ? translationPricingTable
            : defaultPricingTableData))
    );
    const computedPricingTable = buildPricingTable(rawPricingTableData);
    const fallbackPricingTable = buildPricingTable(defaultPricingTableData);
    const pricingTable = computedPricingTable.length ? computedPricingTable : fallbackPricingTable;
    const primaryPricing = buildPrimaryPricing(pricingSchedule) || shop.pricing || {};
    const pricingHighlightSubtitle = [shop.region, shop.district, shop.category]
      .filter(Boolean)
      .join(' · ');
    const locationSummary = [shop.region, shop.district]
      .filter(Boolean)
      .join(' · ');
    const highlightBlock = (scheduleDefaultBlockId
      ? pricingTable.find(function (block) {
          return block && block.id === scheduleDefaultBlockId && Array.isArray(block.prices) && block.prices.length;
        })
      : null)
      || pricingTable.find(function (block) {
        return Array.isArray(block.prices) && block.prices.length;
      })
      || null;
    const highlightPrice = highlightBlock ? highlightBlock.prices[0] : null;
    const perPersonNoteParts = [];

    if (highlightPrice && highlightPrice.label) {
      const perPersonContext = pricingHighlight.perPersonContext || '기준';
      perPersonNoteParts.push(`${perPersonContext} ${highlightPrice.label}`);
    }

    if (highlightBlock && highlightBlock.label) {
      perPersonNoteParts.push(highlightBlock.label);
    }

    const perPersonNote = perPersonNoteParts.join(' · ');

    const entriesText = (t.shop && t.shop.entries) || {};
    const entriesColumnText = entriesText.columns || {};
    const entriesTitleText = entriesText.title || '엔트리 현황';
    const entriesEmptyText = entriesText.empty || '등록된 엔트리 정보가 없습니다.';
    const entriesWorkerLabel = entriesColumnText.worker || '담당자';

    function buildPricingTable(blocks) {
      if (!Array.isArray(blocks)) {
        return [];
      }

      return blocks
        .map(function (block) {
          if (!block || typeof block !== 'object') {
            return null;
          }

          const charges = block.charges || {};
          const baseCharge = toNumeric(charges.base);
          const tcCharge = toNumeric(charges.tc);
          const rtCharge = toNumeric(charges.rt);
          const hasCharges = [baseCharge, tcCharge, rtCharge].every(function (value) {
            return Number.isFinite(value);
          });

          const guestEntries = Array.isArray(block.guests) && block.guests.length
            ? block.guests
            : [1, 2, 3, 4];

          let computedPrices = [];

          if (hasCharges) {
            computedPrices = guestEntries.reduce(function (acc, guestEntry) {
              const normalized = normalizeGuestEntry(guestEntry);

              if (!normalized) {
                return acc;
              }

              const totalCharge = baseCharge + rtCharge + (tcCharge * normalized.count);

              acc.push({
                label: normalized.label,
                amount: formatAmount(totalCharge, block),
              });

              return acc;
            }, []);
          }

          if (!computedPrices.length && Array.isArray(block.prices) && block.prices.length) {
            computedPrices = block.prices
              .filter(function (item) {
                return item && typeof item === 'object';
              })
              .map(function (item) {
                return {
                  label: item.label || '',
                  amount: item.amount || '',
                };
              });
          }

          const meta = block.meta || (hasCharges
            ? formatMeta(baseCharge, tcCharge, rtCharge, block)
            : null);

          return {
            ...block,
            prices: computedPrices,
            meta,
          };
        })
        .filter(Boolean);
    }

    function buildBlocksFromSchedule(schedule) {
      if (!schedule || typeof schedule !== 'object') {
        return [];
      }

      const segments = Array.isArray(schedule.segments) ? schedule.segments : [];

      if (!segments.length) {
        return [];
      }

      const scheduleTc = toNumeric(schedule.tc);
      const scheduleRt = toNumeric(schedule.rt);
      const baseGuests = Array.isArray(schedule.guestCounts) && schedule.guestCounts.length
        ? schedule.guestCounts
        : [1, 2, 3, 4];
      const amountConfig = resolveScheduleAmountConfig(schedule);
      const scheduleMetaLabels = schedule.metaLabels || null;

      return segments.reduce(function (acc, segment) {
        if (!segment || typeof segment !== 'object') {
          return acc;
        }

        const baseCharge = toNumeric(segment.base);
        const tcCharge = getSegmentCharge(segment.tc, scheduleTc);
        const rtCharge = getSegmentCharge(segment.rt, scheduleRt);

        if (![baseCharge, tcCharge, rtCharge].every(function (value) { return Number.isFinite(value); })) {
          return acc;
        }

        const segmentGuests = Array.isArray(segment.guests) && segment.guests.length
          ? segment.guests
          : baseGuests;
        const mergedAmount = segment.amount
          ? { ...amountConfig, ...segment.amount }
          : amountConfig;
        const metaLabels = segment.metaLabels || scheduleMetaLabels;

        acc.push({
          id: typeof segment.id === 'string' ? segment.id : null,
          label: segment.label || '',
          charges: {
            base: baseCharge,
            tc: tcCharge,
            rt: rtCharge,
          },
          guests: segmentGuests,
          amount: mergedAmount,
          metaLabels,
        });

        return acc;
      }, []);
    }

    function buildPrimaryPricing(schedule) {
      if (!schedule || typeof schedule !== 'object') {
        return null;
      }

      const segments = Array.isArray(schedule.segments) ? schedule.segments : [];

      if (!segments.length) {
        return null;
      }

      const baseAmountConfig = resolveScheduleAmountConfig(schedule);
      const defaultSegmentId = typeof schedule.defaultSegmentId === 'string'
        ? schedule.defaultSegmentId
        : null;
      const targetSegment = (defaultSegmentId
        ? segments.find(function (segment) { return segment && segment.id === defaultSegmentId; })
        : null) || segments[0];

      if (!targetSegment || typeof targetSegment !== 'object') {
        return null;
      }

      const baseCharge = toNumeric(targetSegment.base);
      const tcCharge = getSegmentCharge(targetSegment.tc, schedule.tc);
      const rtCharge = getSegmentCharge(targetSegment.rt, schedule.rt);

      if (!Number.isFinite(baseCharge)) {
        return null;
      }

      const mergedAmountConfig = targetSegment.amount
        ? { ...baseAmountConfig, ...targetSegment.amount }
        : baseAmountConfig;
      const block = { amount: mergedAmountConfig };

      const formatted = {
        base: formatAmount(baseCharge, block),
      };

      const highlightSegments = segments
        .slice()
        .sort(function (a, b) {
          const orderA = a && typeof a.highlightOrder === 'number' ? a.highlightOrder : Number.POSITIVE_INFINITY;
          const orderB = b && typeof b.highlightOrder === 'number' ? b.highlightOrder : Number.POSITIVE_INFINITY;

          if (orderA !== orderB) {
            return orderA - orderB;
          }

          return 0;
        })
        .reduce(function (acc, segment) {
          if (!segment || typeof segment !== 'object') {
            return acc;
          }

          const segmentBaseCharge = toNumeric(segment.base);

          if (!Number.isFinite(segmentBaseCharge)) {
            return acc;
          }

          const segmentAmountConfig = segment.amount
            ? { ...baseAmountConfig, ...segment.amount }
            : baseAmountConfig;
          const segmentBlock = { amount: segmentAmountConfig };

          acc.push({
            id: segment.id || null,
            label: resolveSegmentHighlightLabel(segment),
            value: formatAmount(segmentBaseCharge, segmentBlock),
          });

          return acc;
        }, []);

      if (highlightSegments.length) {
        formatted.baseSegments = highlightSegments;
      }

      if (Number.isFinite(tcCharge)) {
        formatted.tc = formatAmount(tcCharge, block);
      }

      if (Number.isFinite(rtCharge)) {
        formatted.rt = formatAmount(rtCharge, block);
      }

      return formatted;
    }

    function resolveSegmentHighlightLabel(segment) {
      if (!segment || typeof segment !== 'object') {
        return pricingText.base || '주대';
      }

      const highlightLabel = segment.highlightLabel;

      if (typeof highlightLabel === 'string' && highlightLabel.trim()) {
        return highlightLabel.trim();
      }

      if (highlightLabel && typeof highlightLabel === 'object') {
        const localized = highlightLabel[activeLang];

        if (typeof localized === 'string' && localized.trim()) {
          return localized.trim();
        }

        if (typeof highlightLabel.ko === 'string' && highlightLabel.ko.trim()) {
          return highlightLabel.ko.trim();
        }

        const fallbackLabel = Object.keys(highlightLabel).reduce(function (acc, key) {
          if (acc) {
            return acc;
          }

          const value = highlightLabel[key];

          if (typeof value === 'string' && value.trim()) {
            return value.trim();
          }

          return acc;
        }, null);

        if (fallbackLabel) {
          return fallbackLabel;
        }
      }

      if (typeof segment.label === 'string' && segment.label.trim()) {
        return segment.label.trim();
      }

      return pricingText.base || '주대';
    }

    function resolveScheduleAmountConfig(schedule) {
      const config = schedule && typeof schedule.amount === 'object'
        ? { ...schedule.amount }
        : {};

      if (typeof schedule.unitSuffix === 'string'
        && !Object.prototype.hasOwnProperty.call(config, 'suffix')) {
        config.suffix = schedule.unitSuffix;
      }

      return config;
    }

    function getSegmentCharge(segmentValue, fallbackValue) {
      const segmentNumeric = toNumeric(segmentValue);

      if (Number.isFinite(segmentNumeric)) {
        return segmentNumeric;
      }

      const fallbackNumeric = toNumeric(fallbackValue);

      return Number.isFinite(fallbackNumeric) ? fallbackNumeric : NaN;
    }

    function normalizeGuestEntry(entry) {
      if (typeof entry === 'number') {
        if (!Number.isFinite(entry) || entry <= 0) {
          return null;
        }

        return {
          count: entry,
          label: buildGuestLabel(entry),
        };
      }

      if (!entry || typeof entry !== 'object') {
        return null;
      }

      let count = entry.count;

      if (typeof count === 'string' && count.trim()) {
        count = parseInt(count, 10);
      }

      if (!Number.isFinite(count) || count <= 0) {
        return null;
      }

      return {
        count,
        label: entry.label || buildGuestLabel(count),
      };
    }

    function buildGuestLabel(count) {
      if (activeLang === 'en') {
        return count === 1 ? '1 guest' : `${count} guests`;
      }

      if (activeLang === 'zh') {
        return `${count}人`;
      }

      if (activeLang === 'ja') {
        return `${count}名`;
      }

      return `${count}인`;
    }

    function toNumeric(value) {
      if (typeof value === 'number' && !Number.isNaN(value)) {
        return value;
      }

      if (typeof value === 'string' && value.trim()) {
        const parsed = parseFloat(value.replace(/[^0-9.-]/g, ''));
        return Number.isNaN(parsed) ? NaN : parsed;
      }

      return NaN;
    }

    function formatAmount(value, block) {
      if (!Number.isFinite(value)) {
        return '—';
      }

      const amountConfig = block && block.amount ? block.amount : {};
      const multiplier = toNumeric(amountConfig.multiplier);
      const resolvedMultiplier = Number.isFinite(multiplier) ? multiplier : 1;
      const decimalsRaw = typeof amountConfig.decimals === 'string'
        ? parseInt(amountConfig.decimals, 10)
        : amountConfig.decimals;
      const decimals = Number.isFinite(decimalsRaw) ? decimalsRaw : 0;
      const locale = typeof amountConfig.locale === 'string'
        ? amountConfig.locale
        : getLocaleForLang(activeLang);
      const useGrouping = amountConfig.useGrouping === true;
      const scaledValue = value * resolvedMultiplier;

      let formattedNumber;

      try {
        formattedNumber = new Intl.NumberFormat(locale, {
          minimumFractionDigits: decimals,
          maximumFractionDigits: decimals,
          useGrouping,
        }).format(scaledValue);
      } catch (error) {
        formattedNumber = scaledValue.toFixed(decimals);
      }

      if (typeof amountConfig.format === 'string' && amountConfig.format.includes('{value}')) {
        return amountConfig.format.replace('{value}', formattedNumber);
      }

      const prefix = Object.prototype.hasOwnProperty.call(amountConfig, 'prefix')
        ? amountConfig.prefix
        : '';
      const suffix = Object.prototype.hasOwnProperty.call(amountConfig, 'suffix')
        ? amountConfig.suffix
        : getDefaultAmountSuffix(activeLang);

      return `${prefix}${formattedNumber}${suffix}`;
    }

    function formatMeta(baseCharge, tcCharge, rtCharge, block) {
      const metaLabels = block && block.metaLabels ? block.metaLabels : {};
      const baseLabel = metaLabels.base || pricingText.base || '주대';
      const tcLabel = metaLabels.tc || pricingText.tc || 'TC';
      const rtLabel = metaLabels.rt || pricingText.rt || 'RT';
      const amountBlock = block && typeof block === 'object'
        ? block
        : {};
      const formattedBase = formatAmount(baseCharge, amountBlock);
      const formattedTc = formatAmount(tcCharge, amountBlock);
      const formattedRt = formatAmount(rtCharge, amountBlock);

      return `${baseLabel} ${formattedBase} · ${tcLabel} ${formattedTc} · ${rtLabel} ${formattedRt}`;
    }

    function getLocaleForLang(language) {
      switch (language) {
        case 'en':
          return 'en-US';
        case 'zh':
          return 'zh-CN';
        case 'ja':
          return 'ja-JP';
        default:
          return 'ko-KR';
      }
    }

    function getDefaultAmountSuffix(language) {
      switch (language) {
        case 'en':
          return 'K KRW';
        case 'zh':
          return '萬韓元';
        case 'ja':
          return '万ウォン';
        default:
          return '만';
      }
    }
  %>

  <section class="pricing-highlight">
    <div class="container">
      <div class="pricing-highlight__panel">
        <% if (highlightGallery.length) { %>
          <div
            class="pricing-highlight__media"
            data-slider
            data-dot-label="<%= t.shop && t.shop.gallery ? t.shop.gallery.dotLabel : 'View image {{index}}' %>"
          >
            <div class="detail-gallery__track" data-slider-track>
              <% highlightGallery.forEach(function (image) { %>
                <figure class="detail-gallery__slide pricing-highlight__media-slide">
                  <img src="<%= image.src %>" alt="<%= image.alt || fallbackAltText %>" />
                </figure>
              <% }) %>
            </div>
            <% if (highlightGallery.length > 1) { %>
              <button
                class="detail-gallery__control detail-gallery__control--prev pricing-highlight__control"
                type="button"
                aria-label="<%= t.shop && t.shop.gallery ? t.shop.gallery.prev : 'Previous image' %>"
                data-slider-prev
              ></button>
              <button
                class="detail-gallery__control detail-gallery__control--next pricing-highlight__control"
                type="button"
                aria-label="<%= t.shop && t.shop.gallery ? t.shop.gallery.next : 'Next image' %>"
                data-slider-next
              ></button>
              <div class="detail-gallery__dots pricing-highlight__dots" data-slider-dots></div>
            <% } %>
          </div>
        <% } %>
        <div class="pricing-highlight__header">
          <span class="pricing-highlight__badge"><%= pricingHighlight.badge || '업소 정보' %></span>
          <h2 class="pricing-highlight__title"><%= shop.name %></h2>
          <% if (pricingHighlightSubtitle) { %>
            <p class="pricing-highlight__subtitle"><%= pricingHighlightSubtitle %></p>
          <% } %>
        </div>
        <% const resolvedPrimaryPricing = primaryPricing || {}; %>
        <% const basePriceSegments = (Array.isArray(resolvedPrimaryPricing.baseSegments) && resolvedPrimaryPricing.baseSegments.length)
          ? resolvedPrimaryPricing.baseSegments
          : [{
            label: pricingText.base || '주대',
            value: resolvedPrimaryPricing.base || (shop.pricing && shop.pricing.base) || '—',
          }]; %>
        <div class="pricing-highlight__content">
          <div class="pricing-highlight__info">
            <div class="pricing-highlight__meta-grid">
              <% if (locationSummary) { %>
                <article class="pricing-highlight__meta-card">
                  <span class="pricing-highlight__meta-label"><%= pricingHighlight.region || '지역' %></span>
                  <strong class="pricing-highlight__meta-value"><%= locationSummary %></strong>
                </article>
              <% } %>
              <% if (shop.category) { %>
                <article class="pricing-highlight__meta-card">
                  <span class="pricing-highlight__meta-label"><%= pricingHighlight.category || '업종' %></span>
                  <strong class="pricing-highlight__meta-value"><%= shop.category %></strong>
                </article>
              <% } %>
              <article class="pricing-highlight__meta-card">
                <span class="pricing-highlight__meta-label"><%= pricingHighlight.brand || '상호' %></span>
                <strong class="pricing-highlight__meta-value"><%= shop.name %></strong>
              </article>
            </div>
          </div>
          <div class="pricing-highlight__charges">
            <% basePriceSegments.forEach(function (segment) { %>
              <article class="pricing-highlight__price-card">
                <span class="pricing-highlight__price-label"><%= segment && segment.label ? segment.label : (pricingText.base || '주대') %></span>
                <strong class="pricing-highlight__price-value"><%= segment && segment.value ? segment.value : (resolvedPrimaryPricing.base || '—') %></strong>
              </article>
            <% }); %>
            <article class="pricing-highlight__price-card">
              <span class="pricing-highlight__price-label"><%= pricingText.tc || 'TC' %></span>
              <strong class="pricing-highlight__price-value"><%= resolvedPrimaryPricing.tc || '—' %></strong>
            </article>
            <article class="pricing-highlight__price-card">
              <span class="pricing-highlight__price-label"><%= pricingText.rt || 'RT' %></span>
              <strong class="pricing-highlight__price-value"><%= resolvedPrimaryPricing.rt || '—' %></strong>
            </article>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="section detail-section">
    <div class="container detail-section__grid">
      <div class="detail-card detail-card--full">
        <h2><%= t.shop && t.shop.pricing ? t.shop.pricing.title : 'Pricing' %></h2>
        <div class="rate-table">
          <% pricingTable.forEach(function(block) { %>
            <div class="rate-table__block">
              <div class="rate-table__header">
                <h3><%= block.label %></h3>
                <% if (block.meta) { %>
                  <span class="rate-table__meta"><%= block.meta %></span>
                <% } %>
              </div>
              <ul class="rate-table__list">
                <% (block.prices || []).forEach(function(item) { %>
                  <li>
                    <span class="rate-table__person"><%= item.label %></span>
                    <strong class="rate-table__amount"><%= item.amount %></strong>
                  </li>
                <% }) %>
              </ul>
            </div>
          <% }) %>
        </div>
      </div>
    </div>
  </section>

  <section class="section detail-section store-entries">
    <div class="container detail-section__grid">
      <div class="detail-card detail-card--full">
        <h2><%= entriesTitleText %></h2>
        <% if (Array.isArray(storeEntries) && storeEntries.length) { %>
          <div class="store-entries__table-wrapper">
            <table class="store-entries__table">
              <thead>
                <tr>
                  <th scope="col"><%= entriesWorkerLabel %></th>
                  <th scope="col"><%= entriesColumnText.mentionCount || '멘션 수' %></th>
                  <th scope="col"><%= entriesColumnText.insertCount || '입장 수' %></th>
                  <th scope="col"><%= entriesColumnText.createdAt || '기록 시간' %></th>
                </tr>
              </thead>
              <tbody>
                <% storeEntries.forEach(function (entry) { %>
                  <tr>
                    <td><%= entry.workerName || '-' %></td>
                    <td><%= entry.mentionCountLabel %></td>
                    <td><%= entry.insertCountLabel %></td>
                    <td><%= entry.createdAtLabel %></td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        <% } else { %>
          <p class="store-entries__empty"><%= entriesEmptyText %></p>
        <% } %>
      </div>
    </div>
  </section>

  <div class="seo-keywords" aria-hidden="true">
    <%- (seoKeywords || []).join(', ') %>
  </div>

  <%
  const resolvedLocation = shopLocation && typeof shopLocation === 'object' ? shopLocation : null;
  const locationLat = resolvedLocation && Number.isFinite(resolvedLocation.lat) ? resolvedLocation.lat : null;
  const locationLng = resolvedLocation && Number.isFinite(resolvedLocation.lng) ? resolvedLocation.lng : null;
  const resolvedMapAuthErrorCode = typeof mapAuthErrorCode === 'string' ? mapAuthErrorCode : '';
  const mapAuthErrorMessage =
    resolvedMapAuthErrorCode === 'NAVER_MAP_AUTH'
      ? mapText.authError ||
        'Naver Maps authentication failed. Please enable the API subscription in your Naver Cloud project.'
      : '';
  const staticMapEndpoint =
    shop && shop.id ? `/shops/${encodeURIComponent(shop.id)}/map/static` : '';
  const staticMapMessage =
    mapText.staticFallback ||
    'Showing static map preview while interactive map is unavailable.';
  const staticMapAlt = formatMapLabel(
    mapText.staticAlt || 'Static map showing location of {{shopName}}'
  );
%>

  <div class="detail-location">
    <section class="section detail-section">
      <div class="container detail-section__grid">
        <div class="detail-card detail-card--full">
          <h2><%= mapText.title || 'Location' %></h2>
          <div
            class="shop-map"
            data-shop-map
            data-shop-name="<%= shop.name %>"
            data-shop-address="<%= shop.address %>"
            data-shop-district="<%= shop.district %>"
            data-shop-region="<%= shop.region %>"
            data-map-locale="<%= lang || 'ko' %>"
            data-loading-text="<%= mapText.loading || 'Loading map…' %>"
            data-error-text="<%= mapText.error || 'Unable to load map. Please check the address.' %>"
            data-static-map-endpoint="<%= staticMapEndpoint %>"
            data-static-map-message="<%= staticMapMessage %>"
            data-static-map-alt="<%= staticMapAlt %>"
            <% if (mapAuthErrorMessage) { %>
              data-map-auth-error="<%= mapAuthErrorMessage %>"
            <% } %>
            <% if (locationLat !== null && locationLng !== null) { %>
              data-shop-lat="<%= locationLat %>"
              data-shop-lng="<%= locationLng %>"
            <% } %>
          >
            <div
              class="shop-map__map"
              data-map-region
              role="img"
              aria-label="<%= formatMapLabel(mapText.ariaLabel || 'Map showing location of {{shopName}}') %>"
            ></div>
            <p class="shop-map__status" data-map-status aria-live="polite">
              <%= mapText.loading || 'Loading map…' %>
            </p>
          </div>
        </div>
      </div>
    </section>
  </div>
<%
  const resolvedClientId = typeof naverMapClientId === 'string' ? naverMapClientId.trim() : '';
  const mapScripts = [];
  if (resolvedClientId) {
    const encodedClientId = encodeURIComponent(resolvedClientId);
    mapScripts.push(`https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${encodedClientId}&submodules=geocoder`);
  }
  mapScripts.push('/scripts/shop-detail.js');
%>
<%- include('partials/footer', {
  scripts: mapScripts
}) %>
