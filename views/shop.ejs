<%
  const fallbackAltSuffix = (t.shop && t.shop.galleryAltFallback) || '분위기';
  const fallbackAltText = shop.imageAlt || `${shop.name} ${fallbackAltSuffix}`;
  const galleryImages = Array.isArray(shop.gallery) && shop.gallery.length
    ? shop.gallery
    : (shop.image
        ? [{ src: shop.image, alt: fallbackAltText }]
        : []);
%>
<%- include('partials/head', { title: pageTitle, description: metaDescription, seoKeywords }) %>
  <section class="detail-hero">
    <div class="container detail-hero__grid">
      <div
        class="detail-gallery"
        data-slider
        data-dot-label="<%= t.shop && t.shop.gallery ? t.shop.gallery.dotLabel : 'View image {{index}}' %>"
      >
        <div class="detail-gallery__track" data-slider-track>
          <% galleryImages.forEach(function(image) {
               const source = typeof image === 'string' ? image : image.src;
               const altText = typeof image === 'string'
                 ? `${shop.name} ${fallbackAltSuffix}`
                 : (image.alt || `${shop.name} ${fallbackAltSuffix}`);
          %>
            <figure class="detail-gallery__slide">
              <img src="<%= source %>" alt="<%= altText %>" />
            </figure>
          <% }) %>
        </div>
        <% if (galleryImages.length > 1) { %>
          <button
            class="detail-gallery__control detail-gallery__control--prev"
            type="button"
            aria-label="<%= t.shop && t.shop.gallery ? t.shop.gallery.prev : 'Previous image' %>"
            data-slider-prev
          ></button>
          <button
            class="detail-gallery__control detail-gallery__control--next"
            type="button"
            aria-label="<%= t.shop && t.shop.gallery ? t.shop.gallery.next : 'Next image' %>"
            data-slider-next
          ></button>
          <div class="detail-gallery__dots" data-slider-dots></div>
        <% } %>
      </div>
      <div class="detail-hero__info">
        <p class="detail-hero__meta"><%= shop.region %> · <%= shop.district %> · <%= shop.category %></p>
        <h1><%= shop.name %></h1>
        <% const defaultServices = ['강남권 픽업 서비스', '발렛파킹 서비스']; %>
        <% const serviceBadges = Array.isArray(t.shop && t.shop.services) && (t.shop.services.length ? t.shop.services : defaultServices) || defaultServices; %>
        <% if (serviceBadges.length) { %>
          <div class="detail-hero__services">
            <% serviceBadges.forEach(function(service) { %>
              <span class="detail-hero__service"><%= service %></span>
            <% }) %>
          </div>
        <% } %>
        <dl class="detail-hero__list">
          <div>
            <dt><%= t.shop && t.shop.address ? t.shop.address : 'Address' %></dt>
            <dd><%= shop.address %></dd>
          </div>
          <div>
            <dt><%= t.shop && t.shop.hours ? t.shop.hours : 'Hours' %></dt>
            <dd><%= shop.hours %></dd>
          </div>
        </dl>
        <div class="detail-hero__actions">
          <a class="back-link" href="/"><%= t.shop && t.shop.back ? t.shop.back : 'Back to home' %></a>
        </div>
      </div>
    </div>
  </section>

  <%
    const activeLang = typeof lang === 'string' && lang ? lang : 'ko';

    const defaultPricingTableData = [
      {
        label: '오후 9시 이전',
        charges: { base: 10, tc: 12, rt: 5 },
        guests: [
          { count: 1, label: '1인' },
          { count: 2, label: '2인' },
          { count: 3, label: '3인' },
          { count: 4, label: '4인' },
        ],
        amount: { suffix: '만' },
      },
      {
        label: '오후 9시 이후',
        charges: { base: 13, tc: 12, rt: 5 },
        guests: [
          { count: 1, label: '1인' },
          { count: 2, label: '2인' },
          { count: 3, label: '3인' },
          { count: 4, label: '4인' },
        ],
        amount: { suffix: '만' },
      },
    ];

    const pricingText = (t.shop && t.shop.pricing) || {};
    const pricingHighlight = (t.shop && t.shop.pricingHighlight) || {};
    const translationPricingTable = Array.isArray(t.shop && t.shop.pricingTable)
      ? t.shop.pricingTable
      : null;
    const rawPricingTableData = (
      Array.isArray(shop.pricingTable) && shop.pricingTable.length
        ? shop.pricingTable
        : (translationPricingTable && translationPricingTable.length
          ? translationPricingTable
          : defaultPricingTableData)
    );
    const computedPricingTable = buildPricingTable(rawPricingTableData);
    const fallbackPricingTable = buildPricingTable(defaultPricingTableData);
    const pricingTable = computedPricingTable.length ? computedPricingTable : fallbackPricingTable;
    const primaryPricing = shop.pricing || {};
    const pricingHighlightSubtitle = [shop.region, shop.district, shop.category]
      .filter(Boolean)
      .join(' · ');
    const locationSummary = [shop.region, shop.district]
      .filter(Boolean)
      .join(' · ');
    const highlightBlock = pricingTable.find(function (block) {
      return Array.isArray(block.prices) && block.prices.length;
    }) || null;
    const highlightPrice = highlightBlock ? highlightBlock.prices[0] : null;
    const perPersonNoteParts = [];

    if (highlightPrice && highlightPrice.label) {
      const perPersonContext = pricingHighlight.perPersonContext || '기준';
      perPersonNoteParts.push(`${perPersonContext} ${highlightPrice.label}`);
    }

    if (highlightBlock && highlightBlock.label) {
      perPersonNoteParts.push(highlightBlock.label);
    }

    const perPersonNote = perPersonNoteParts.join(' · ');

    function buildPricingTable(blocks) {
      if (!Array.isArray(blocks)) {
        return [];
      }

      return blocks
        .map(function (block) {
          if (!block || typeof block !== 'object') {
            return null;
          }

          const charges = block.charges || {};
          const baseCharge = toNumeric(charges.base);
          const tcCharge = toNumeric(charges.tc);
          const rtCharge = toNumeric(charges.rt);
          const hasCharges = [baseCharge, tcCharge, rtCharge].every(function (value) {
            return Number.isFinite(value);
          });

          const guestEntries = Array.isArray(block.guests) && block.guests.length
            ? block.guests
            : [1, 2, 3, 4];

          let computedPrices = [];

          if (hasCharges) {
            computedPrices = guestEntries.reduce(function (acc, guestEntry) {
              const normalized = normalizeGuestEntry(guestEntry);

              if (!normalized) {
                return acc;
              }

              const totalCharge = baseCharge + rtCharge + (tcCharge * normalized.count);

              acc.push({
                label: normalized.label,
                amount: formatAmount(totalCharge, block),
              });

              return acc;
            }, []);
          }

          if (!computedPrices.length && Array.isArray(block.prices) && block.prices.length) {
            computedPrices = block.prices
              .filter(function (item) {
                return item && typeof item === 'object';
              })
              .map(function (item) {
                return {
                  label: item.label || '',
                  amount: item.amount || '',
                };
              });
          }

          const meta = block.meta || (hasCharges
            ? formatMeta(baseCharge, tcCharge, rtCharge, block)
            : null);

          return {
            ...block,
            prices: computedPrices,
            meta,
          };
        })
        .filter(Boolean);
    }

    function normalizeGuestEntry(entry) {
      if (typeof entry === 'number') {
        if (!Number.isFinite(entry) || entry <= 0) {
          return null;
        }

        return {
          count: entry,
          label: buildGuestLabel(entry),
        };
      }

      if (!entry || typeof entry !== 'object') {
        return null;
      }

      let count = entry.count;

      if (typeof count === 'string' && count.trim()) {
        count = parseInt(count, 10);
      }

      if (!Number.isFinite(count) || count <= 0) {
        return null;
      }

      return {
        count,
        label: entry.label || buildGuestLabel(count),
      };
    }

    function buildGuestLabel(count) {
      if (activeLang === 'en') {
        return count === 1 ? '1 guest' : `${count} guests`;
      }

      if (activeLang === 'zh') {
        return `${count}人`;
      }

      if (activeLang === 'ja') {
        return `${count}名`;
      }

      return `${count}인`;
    }

    function toNumeric(value) {
      if (typeof value === 'number' && !Number.isNaN(value)) {
        return value;
      }

      if (typeof value === 'string' && value.trim()) {
        const parsed = parseFloat(value.replace(/[^0-9.-]/g, ''));
        return Number.isNaN(parsed) ? NaN : parsed;
      }

      return NaN;
    }

    function formatAmount(value, block) {
      if (!Number.isFinite(value)) {
        return '—';
      }

      const amountConfig = block && block.amount ? block.amount : {};
      const multiplier = toNumeric(amountConfig.multiplier);
      const resolvedMultiplier = Number.isFinite(multiplier) ? multiplier : 1;
      const decimalsRaw = typeof amountConfig.decimals === 'string'
        ? parseInt(amountConfig.decimals, 10)
        : amountConfig.decimals;
      const decimals = Number.isFinite(decimalsRaw) ? decimalsRaw : 0;
      const locale = typeof amountConfig.locale === 'string'
        ? amountConfig.locale
        : getLocaleForLang(activeLang);
      const useGrouping = amountConfig.useGrouping === true;
      const scaledValue = value * resolvedMultiplier;

      let formattedNumber;

      try {
        formattedNumber = new Intl.NumberFormat(locale, {
          minimumFractionDigits: decimals,
          maximumFractionDigits: decimals,
          useGrouping,
        }).format(scaledValue);
      } catch (error) {
        formattedNumber = scaledValue.toFixed(decimals);
      }

      if (typeof amountConfig.format === 'string' && amountConfig.format.includes('{value}')) {
        return amountConfig.format.replace('{value}', formattedNumber);
      }

      const prefix = Object.prototype.hasOwnProperty.call(amountConfig, 'prefix')
        ? amountConfig.prefix
        : '';
      const suffix = Object.prototype.hasOwnProperty.call(amountConfig, 'suffix')
        ? amountConfig.suffix
        : getDefaultAmountSuffix(activeLang);

      return `${prefix}${formattedNumber}${suffix}`;
    }

    function formatMeta(baseCharge, tcCharge, rtCharge, block) {
      const metaLabels = block && block.metaLabels ? block.metaLabels : {};
      const baseLabel = metaLabels.base || pricingText.base || '주대';
      const tcLabel = metaLabels.tc || pricingText.tc || 'TC';
      const rtLabel = metaLabels.rt || pricingText.rt || 'RT';

      return `${baseLabel} ${baseCharge} · ${tcLabel} ${tcCharge} · ${rtLabel} ${rtCharge}`;
    }

    function getLocaleForLang(language) {
      switch (language) {
        case 'en':
          return 'en-US';
        case 'zh':
          return 'zh-CN';
        case 'ja':
          return 'ja-JP';
        default:
          return 'ko-KR';
      }
    }

    function getDefaultAmountSuffix(language) {
      switch (language) {
        case 'en':
          return 'K KRW';
        case 'zh':
          return '萬韓元';
        case 'ja':
          return '万ウォン';
        default:
          return '만';
      }
    }
  %>

  <section class="pricing-highlight">
    <div class="container">
      <div class="pricing-highlight__panel">
        <div class="pricing-highlight__header">
          <span class="pricing-highlight__badge"><%= pricingHighlight.badge || '금액 안내' %></span>
          <h2 class="pricing-highlight__title"><%= shop.name %></h2>
          <% if (pricingHighlightSubtitle) { %>
            <p class="pricing-highlight__subtitle"><%= pricingHighlightSubtitle %></p>
          <% } %>
        </div>
        <div class="pricing-highlight__content">
          <div class="pricing-highlight__info">
            <div class="pricing-highlight__meta-grid">
              <% if (locationSummary) { %>
                <article class="pricing-highlight__meta-card">
                  <span class="pricing-highlight__meta-label"><%= pricingHighlight.region || '지역' %></span>
                  <strong class="pricing-highlight__meta-value"><%= locationSummary %></strong>
                </article>
              <% } %>
              <% if (shop.category) { %>
                <article class="pricing-highlight__meta-card">
                  <span class="pricing-highlight__meta-label"><%= pricingHighlight.category || '업종' %></span>
                  <strong class="pricing-highlight__meta-value"><%= shop.category %></strong>
                </article>
              <% } %>
              <article class="pricing-highlight__meta-card">
                <span class="pricing-highlight__meta-label"><%= pricingHighlight.brand || '상호' %></span>
                <strong class="pricing-highlight__meta-value"><%= shop.name %></strong>
              </article>
            </div>
            <div class="pricing-highlight__charges">
              <article class="pricing-highlight__price-card">
                <span class="pricing-highlight__price-label"><%= pricingText.base || '주대' %></span>
                <strong class="pricing-highlight__price-value"><%= primaryPricing.base || '—' %></strong>
              </article>
              <article class="pricing-highlight__price-card">
                <span class="pricing-highlight__price-label"><%= pricingText.tc || 'TC' %></span>
                <strong class="pricing-highlight__price-value"><%= primaryPricing.tc || '—' %></strong>
              </article>
              <article class="pricing-highlight__price-card">
                <span class="pricing-highlight__price-label"><%= pricingText.rt || 'RT' %></span>
                <strong class="pricing-highlight__price-value"><%= primaryPricing.rt || '—' %></strong>
              </article>
            </div>
          </div>
          <div class="pricing-highlight__per-person">
            <span class="pricing-highlight__per-person-label"><%= pricingHighlight.perPerson || '인당 가격' %></span>
            <strong class="pricing-highlight__per-person-amount"><%= (highlightPrice && highlightPrice.amount) || '—' %></strong>
            <% if (perPersonNote) { %>
              <p class="pricing-highlight__per-person-note"><%= perPersonNote %></p>
            <% } else if (pricingHighlightSubtitle) { %>
              <p class="pricing-highlight__per-person-note"><%= pricingHighlightSubtitle %></p>
            <% } %>
            <% if (highlightBlock && highlightBlock.meta) { %>
              <p class="pricing-highlight__per-person-meta"><%= highlightBlock.meta %></p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="section detail-section">
    <div class="container detail-section__grid">
      <div class="detail-card detail-card--full">
        <h2><%= t.shop && t.shop.pricing ? t.shop.pricing.title : 'Pricing' %></h2>
        <div class="rate-table">
          <% pricingTable.forEach(function(block) { %>
            <div class="rate-table__block">
              <div class="rate-table__header">
                <h3><%= block.label %></h3>
                <% if (block.meta) { %>
                  <span class="rate-table__meta"><%= block.meta %></span>
                <% } %>
              </div>
              <ul class="rate-table__list">
                <% (block.prices || []).forEach(function(item) { %>
                  <li>
                    <span class="rate-table__person"><%= item.label %></span>
                    <strong class="rate-table__amount"><%= item.amount %></strong>
                  </li>
                <% }) %>
              </ul>
            </div>
          <% }) %>
        </div>
      </div>
    </div>
  </section>

  <div class="seo-keywords" aria-hidden="true">
    <%- (seoKeywords || []).join(', ') %>
  </div>
<%- include('partials/footer', { scripts: ['/scripts/shop-detail.js'] }) %>
